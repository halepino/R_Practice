# HESITANCY DATA AT COUNTY LEVEL
# Open file and select columns
cdc_hesitancy<-read.csv('final_project/Vaccine_Hesitancy_CDC.csv')
colnames(cdc_hesitancy)
cdc_hesitancy<-cdc_hesitancy%>%
select(-1, -7, -8, -9,-10,-17,-18,-19,-20)%>%
rename(Hestitant_est = Estimated.hesitant,
Strongly_Hesitant_est = Estimated.strongly.hesitant,
Hispanic = Percent.Hispanic,
Native_American = Percent.non.Hispanic.American.Indian.Alaska.Native,
Asian = Percent.non.Hispanic.Asian,
Black = Percent.non.Hispanic.Black,
Native_Hawaiian_Pac_Islander = Percent.non.Hispanic.Native.Hawaiian.Pacific.Islander,
White = Percent.non.Hispanic.White)
colnames(cdc_hesitancy)
# Split string to obtain county name in separate column
cdc_hesitancy <- separate(cdc_hesitancy, col =County.Name, into = c( "County", "State"), sep = ",")
head(cdc_hesitancy$County,20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(magrittr)
library(dplyr)
# HESITANCY DATA AT COUNTY LEVEL
# Open file and select columns
cdc_hesitancy<-read.csv('final_project/Vaccine_Hesitancy_CDC.csv')
colnames(cdc_hesitancy)
cdc_hesitancy<-cdc_hesitancy%>%
select(-1, -7, -8, -9,-10,-17,-18,-19,-20)%>%
rename(Hestitant_est = Estimated.hesitant,
Strongly_Hesitant_est = Estimated.strongly.hesitant,
Hispanic = Percent.Hispanic,
Native_American = Percent.non.Hispanic.American.Indian.Alaska.Native,
Asian = Percent.non.Hispanic.Asian,
Black = Percent.non.Hispanic.Black,
Native_Hawaiian_Pac_Islander = Percent.non.Hispanic.Native.Hawaiian.Pacific.Islander,
White = Percent.non.Hispanic.White)
colnames(cdc_hesitancy)
# Split string to obtain county name in separate column
cdc_hesitancy <- separate(cdc_hesitancy, col =County.Name, into = c( "County", "State"), sep = ",")
head(cdc_hesitancy$County,20)
cdc_hesitancy<-read.csv('final_project/Vaccine_Hesitancy_CDC.csv')
colnames(cdc_hesitancy)
getwd()
getwd()
## Set the working directory to the root of your DSC 520 directory
setwd("C:/DataLore/R_Projects/R_Practice")
## Load the `data/r4ds/heights.csv` to
heights_df <- read.csv("data/r4ds/heights.csv")
## Load the ggplot2 library
library(ggplot2)
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
age_lm <- lm(heights_df$earn ~ heights_df$age)
age_lm
## View the summary of your model using `summary()`
summary(age_lm)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<-age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<-age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- (age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
age_lm <- lm(heights_df$earn ~ heights_df$age)
age_lm
## View the summary of your model using `summary()`
summary(age_lm)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- age= c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<-age= c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = row(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = row(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = (18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
(age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85))
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist), age = age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- age = c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, age_testlist))
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- [18, 26, 34, 40, 48, 52, 60, 65, 75, 85]
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- 18, 26, 34, 40, 48, 52, 60, 65, 75, 85
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- c(18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
earn = predict(age_lm, age_testlist)
type(age_testlist)
## Creating predictions using `predict()`-pg268 Intro Stats Using R
age_testlist<- data.frame(age = 18, 26, 34, 40, 48, 52, 60, 65, 75, 85)
(age_testlist)
earn = predict(age_lm, age_testlist)
earn = predict(age_lm, age_testlist)
age_predict_df <- data.frame(earn = predict(age_lm, new_data = age_testlist))
(age_predict_df)
## Plot the predictions against the original data
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red', data=heights_df, aes(y=predict(age_lm, heights_df), x = age))
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
## R Squared R^2 = SSM\SST
r_squared <- ssm/sst
## Number of observations
n <-10
## Number of regression parameters
p <- 2
## Corrected Degrees of Freedom for Model (p-1)
dfm <- (p - 1)
## Degrees of Freedom for Error (n-p)
dfe <- (n - p)
## Corrected Degrees of Freedom Total:   DFT = n - 1
dft <- n -1
## Mean of Squares for Model:   MSM = SSM / DFM
msm <- ssm /dfm
## Mean of Squares for Error:   MSE = SSE / DFE
mse <- sse /dfe
## Mean of Squares Total:   MST = SST / DFT
mst <- sst / dft
## F Statistic F = MSM/MSE
f_score <- msm / mse
## Adjusted R Squared R2 = 1 - (1 - R2)(n - 1) / (n - p)
adjusted_r_squared <- 1 - (1 - r_squared)*(n-1)/(n-p)
## Calculate the p-value from the F distribution
p_value <- pf(f_score, dfm, dft, lower.tail=F)
